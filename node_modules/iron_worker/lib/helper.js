// Generated by CoffeeScript 1.9.3
(function() {
  var _, config, config_file, params, parseCLIData, payload_file, task_dir, task_id;

  _ = require('underscore');

  params = null;

  task_id = null;

  config = null;

  task_dir = null;

  payload_file = null;

  config_file = null;

  parseCLIData = function() {
    var e, fs, parsed, querystring;
    fs = require('fs');
    querystring = require('querystring');
    process.argv.forEach(function(val, index, array) {
      if (val === "-payload") {
        payload_file = process.argv[index + 1];
      }
      if (val === "-config") {
        config_file = process.argv[index + 1];
      }
      if (val === "-id") {
        task_id = process.argv[index + 1];
      }
      if (val === "-d") {
        return task_dir = process.argv[index + 1];
      }
    });
    if (process.env.TASK_ID) {
      task_id = process.env.TASK_ID;
    }
    if (process.env.TASK_DIR) {
      task_dir = process.env.TASK_DIR;
    }
    if (process.env.PAYLOAD_FILE) {
      payload_file = process.env.PAYLOAD_FILE;
    }
    if (process.env.CONFIG_FILE) {
      config_file = process.env.CONFIG_FILE;
    }
    if (payload_file != null) {
      params = fs.readFileSync(payload_file, 'utf8');
      try {
        params = JSON.parse(params);
      } catch (_error) {
        e = _error;
        try {
          parsed = querystring.parse(params);
          if (!(Object.keys(parsed).length === 1 && parsed[Object.keys(parsed)[0]] === '')) {
            params = parsed;
          }
        } catch (_error) {
          e = _error;
        }
      }
    }
    if (config_file != null) {
      config = fs.readFileSync(config_file, 'utf8');
      try {
        return config = JSON.parse(config);
      } catch (_error) {
        e = _error;
      }
    }
  };

  module.exports.params = function() {
    if (!params) {
      parseCLIData();
    }
    return params;
  };

  module.exports.taskId = function() {
    if (!task_id) {
      parseCLIData();
    }
    return task_id;
  };

  module.exports.config = function() {
    if (!config) {
      parseCLIData();
    }
    return config;
  };

  module.exports.taskDir = function() {
    if (!task_dir) {
      parseCLIData();
    }
    return task_dir;
  };

}).call(this);
